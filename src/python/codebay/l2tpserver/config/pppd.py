"""PPPd daemon configuration wrapper."""
__docformat__ = 'epytext en'

import textwrap, re, os

from codebay.common import rdf
from codebay.l2tpserver import helpers
from codebay.l2tpserver import rdfconfig
from codebay.l2tpserver import runcommand
from codebay.l2tpserver import constants
from codebay.l2tpserver.config import daemon

ns = rdfconfig.ns
run_command = runcommand.run_command

pid_dir = '/var/run'
_re_pppd_pidfiles = re.compile(r'^/var/run/ppp.*\.pid$')

# XXX: is it possible to use debug here? pppscripts?

class PppdConfig(daemon.DaemonConfig):
    name = 'pppd'
    command = constants.CMD_PPPD
    pidfile = None
    cleanup_files = []

    def _create_ppp_pap_secrets(self, cfg):
        # with RADIUS support this is no longer needed
        return ''

    def _create_ppp_chap_secrets(self, cfg):
        """Create PPP chap-secrets file as string."""

        return self._create_ppp_pap_secrets(cfg)

    def _create_ppp_options(self, cfg):
        """Create PPP options file (default) as a string.

        This is an intentionally empty file, as we don't use the default PPP
        options file for anything.
        """

        return '# intentionally empty\n'
    
    def _create_ppp_scripts(self, cfg):
        """Create PPP scripts (ip-pre-up, ip-up, ip-down) as strings."""

        ppp_script_fmt = textwrap.dedent("""\
        #!/usr/bin/python

        from codebay.l2tpserver import pppscripts

        try:
            s = pppscripts.PppScripts(name=%(name)r,
                                      public_interface=%(pubif)r,
                                      private_interface=%(privif)r,
                                      proxyarp_interface=%(proxyif)r)
            s.%(funcname)s()
        except:
            from codebay.common import logger
            import sys
            _log = logger.get('l2tpserver.pppscripts.%(name)s')
            _log.exception('failed')
            sys.exit(1)
        """)

        (pub_iface, pub_iface_name), (priv_iface, priv_iface_name) = helpers.get_ifaces(cfg)
        (_, proxyarp_interface) = helpers.get_proxyarp_iface(cfg)

        _pubif = pub_iface_name
        _privif = priv_iface_name # can be None, repr handles
        _proxyif = proxyarp_interface # can be None, repr handles

        ippreup_config = ppp_script_fmt % {'name':'ppp-ip-pre-up',
                                           'funcname':'ppp_ip_pre_up',
                                           'pubif':_pubif,
                                           'privif':_privif,
                                           'proxyif':_proxyif}

        ipup_config = ppp_script_fmt % {'name':'ppp-ip-up',
                                        'funcname':'ppp_ip_up',
                                        'pubif':_pubif,
                                        'privif':_privif,
                                        'proxyif':_proxyif}

        ipdown_config = ppp_script_fmt % {'name':'ppp-ip-down',
                                          'funcname':'ppp_ip_down',
                                          'pubif':_pubif,
                                          'privif':_privif,
                                          'proxyif':_proxyif}

        return {'ip-pre-up': ippreup_config, 'ip-up': ipup_config, 'ip-down': ipdown_config}

    # XXX: radiusclient-ng config file creation does not actually
    # belong here (or even radiusclient), but is there a better place
    def _create_radiusclient_config(self, cfg, resinfo):
        radius_ip = resinfo.public_interface.address.getAddress().toString()
        if resinfo.private_interface is not None:
            radius_ip = resinfo.private_interface.address.getAddress().toString()

        servers = [
            constants.RADIUSCLIENT_SERVERS,
            textwrap.dedent("""\
            # autogenerated file, do not edit
            # %(radius_ip)s notasecret
            127.0.0.1 notasecret
            """ % {'radius_ip':radius_ip})]

        servers_ng = [
            constants.RADIUSCLIENT_NG_SERVERS,
            textwrap.dedent("""\
            # autogenerated file, do not edit
            # %(radius_ip)s notasecret
            127.0.0.1 notasecret
            """ % {'radius_ip':radius_ip})]

        base_dict = textwrap.dedent("""\
#
# Updated 97/06/13 to livingston-radius-2.01 miquels@cistron.nl
#
#	This file contains dictionary translations for parsing
#	requests and generating responses.  All transactions are
#	composed of Attribute/Value Pairs.  The value of each attribute
#	is specified as one of 4 data types.  Valid data types are:
#
#	string - 0-253 octets
#	ipaddr - 4 octets in network byte order
#	integer - 32 bit value in big endian order (high byte first)
#	date - 32 bit value in big endian order - seconds since
#					00:00:00 GMT,  Jan.  1,  1970
#
#	Enumerated values are stored in the user file with dictionary
#	VALUE translations for easy administration.
#
#	Example:
#
#	ATTRIBUTE	  VALUE
#	---------------   -----
#	Framed-Protocol = PPP
#	7		= 1	(integer encoding)
#

# The dictionary format now supports vendor-specific attributes.
# Vendors are introduced like this:
#
#	VENDOR vendor_name vendor_number
#
# For example:
#
#	VENDOR RoaringPenguin 10055
#
# Vendor-specific attributes have a fifth field with the name of the
# vendor.  For example:
#
#       ATTRIBUTE RP-Upstream-Speed-Limit 1 integer RoaringPenguin
#
# introduces a Roaring Penguin vendor-specific attribbute with name
# RP-Upstream-Speed-Limit, number 1, type integer and vendor RoaringPenguin.

#
#	Following are the proper new names. Use these.
#
ATTRIBUTE	User-Name		1	string
ATTRIBUTE	Password		2	string
ATTRIBUTE	CHAP-Password		3	string
ATTRIBUTE	NAS-IP-Address		4	ipaddr
ATTRIBUTE	NAS-Port-Id		5	integer
ATTRIBUTE	Service-Type		6	integer
ATTRIBUTE	Framed-Protocol		7	integer
ATTRIBUTE	Framed-IP-Address	8	ipaddr
ATTRIBUTE	Framed-IP-Netmask	9	ipaddr
ATTRIBUTE	Framed-Routing		10	integer
ATTRIBUTE	Filter-Id		11	string
ATTRIBUTE	Framed-MTU		12	integer
ATTRIBUTE	Framed-Compression	13	integer
ATTRIBUTE	Login-IP-Host		14	ipaddr
ATTRIBUTE	Login-Service		15	integer
ATTRIBUTE	Login-TCP-Port		16	integer
ATTRIBUTE	Reply-Message		18	string
ATTRIBUTE	Callback-Number		19	string
ATTRIBUTE	Callback-Id		20	string
ATTRIBUTE	Framed-Route		22	string
ATTRIBUTE	Framed-IPX-Network	23	ipaddr
ATTRIBUTE	State			24	string
ATTRIBUTE	Class			25	string
ATTRIBUTE	Session-Timeout		27	integer
ATTRIBUTE	Idle-Timeout		28	integer
ATTRIBUTE	Termination-Action	29	integer
ATTRIBUTE	Called-Station-Id	30	string
ATTRIBUTE	Calling-Station-Id	31	string
ATTRIBUTE	NAS-Identifier		32	string
ATTRIBUTE	Acct-Status-Type	40	integer
ATTRIBUTE	Acct-Delay-Time		41	integer
ATTRIBUTE	Acct-Input-Octets	42	integer
ATTRIBUTE	Acct-Output-Octets	43	integer
ATTRIBUTE	Acct-Session-Id		44	string
ATTRIBUTE	Acct-Authentic		45	integer
ATTRIBUTE	Acct-Session-Time	46	integer
ATTRIBUTE	Acct-Input-Packets	47	integer
ATTRIBUTE	Acct-Output-Packets	48	integer
ATTRIBUTE	Acct-Terminate-Cause	49	integer
ATTRIBUTE       Chap-Challenge          60      string
ATTRIBUTE	NAS-Port-Type		61	integer
ATTRIBUTE	Port-Limit		62	integer
ATTRIBUTE	Connect-Info		77	string

# RFC 2869
ATTRIBUTE	Acct-Interim-Interval	85	integer

#
#	Experimental Non Protocol Attributes used by Cistron-Radiusd
#
ATTRIBUTE	Huntgroup-Name		221	string
ATTRIBUTE	User-Category		1029	string
ATTRIBUTE	Group-Name		1030	string
ATTRIBUTE	Simultaneous-Use	1034	integer
ATTRIBUTE	Strip-User-Name		1035	integer
ATTRIBUTE	Fall-Through		1036	integer
ATTRIBUTE	Add-Port-To-IP-Address	1037	integer
ATTRIBUTE	Exec-Program		1038	string
ATTRIBUTE	Exec-Program-Wait	1039	string
ATTRIBUTE	Hint			1040	string

#
#	Non-Protocol Attributes
#	These attributes are used internally by the server
#
ATTRIBUTE	Expiration		  21	date
ATTRIBUTE	Auth-Type		1000	integer
ATTRIBUTE	Menu			1001	string
ATTRIBUTE	Termination-Menu	1002	string
ATTRIBUTE	Prefix			1003	string
ATTRIBUTE	Suffix			1004	string
ATTRIBUTE	Group			1005	string
ATTRIBUTE	Crypt-Password		1006	string
ATTRIBUTE	Connect-Rate		1007	integer

#
#       Experimental, implementation specific attributes
#
# Limit session traffic
ATTRIBUTE	Session-Octets-Limit	227	integer
# What to assume as limit - 0 in+out, 1 in, 2 out, 3 max(in,out)
ATTRIBUTE	Octets-Direction	228	integer

#
#	Integer Translations
#

#	User Types

VALUE		Service-Type		Login-User		1
VALUE		Service-Type		Framed-User		2
VALUE		Service-Type		Callback-Login-User	3
VALUE		Service-Type		Callback-Framed-User	4
VALUE		Service-Type		Outbound-User		5
VALUE		Service-Type		Administrative-User	6
VALUE		Service-Type		NAS-Prompt-User		7

#	Framed Protocols

VALUE		Framed-Protocol		PPP			1
VALUE		Framed-Protocol		SLIP			2

#	Framed Routing Values

VALUE		Framed-Routing		None			0
VALUE		Framed-Routing		Broadcast		1
VALUE		Framed-Routing		Listen			2
VALUE		Framed-Routing		Broadcast-Listen	3

#	Framed Compression Types

VALUE		Framed-Compression	None			0
VALUE		Framed-Compression	Van-Jacobson-TCP-IP	1

#	Login Services

VALUE		Login-Service		Telnet			0
VALUE		Login-Service		Rlogin			1
VALUE		Login-Service		TCP-Clear		2
VALUE		Login-Service		PortMaster		3

#	Status Types

VALUE		Acct-Status-Type	Start			1
VALUE		Acct-Status-Type	Stop			2
VALUE		Acct-Status-Type	Accounting-On		7
VALUE		Acct-Status-Type	Accounting-Off		8

#	Authentication Types

VALUE		Acct-Authentic		RADIUS			1
VALUE		Acct-Authentic		Local			2
VALUE		Acct-Authentic		PowerLink128		100

#	Termination Options

VALUE		Termination-Action	Default			0
VALUE		Termination-Action	RADIUS-Request		1

#	NAS Port Types, available in 3.3.1 and later

VALUE		NAS-Port-Type		Async			0
VALUE		NAS-Port-Type		Sync			1
VALUE		NAS-Port-Type		ISDN			2
VALUE		NAS-Port-Type		ISDN-V120		3
VALUE		NAS-Port-Type		ISDN-V110		4

#	Acct Terminate Causes, available in 3.3.2 and later

VALUE           Acct-Terminate-Cause    User-Request            1
VALUE           Acct-Terminate-Cause    Lost-Carrier            2
VALUE           Acct-Terminate-Cause    Lost-Service            3
VALUE           Acct-Terminate-Cause    Idle-Timeout            4
VALUE           Acct-Terminate-Cause    Session-Timeout         5
VALUE           Acct-Terminate-Cause    Admin-Reset             6
VALUE           Acct-Terminate-Cause    Admin-Reboot            7
VALUE           Acct-Terminate-Cause    Port-Error              8
VALUE           Acct-Terminate-Cause    NAS-Error               9
VALUE           Acct-Terminate-Cause    NAS-Request             10
VALUE           Acct-Terminate-Cause    NAS-Reboot              11
VALUE           Acct-Terminate-Cause    Port-Unneeded           12
VALUE           Acct-Terminate-Cause    Port-Preempted          13
VALUE           Acct-Terminate-Cause    Port-Suspended          14
VALUE           Acct-Terminate-Cause    Service-Unavailable     15
VALUE           Acct-Terminate-Cause    Callback                16
VALUE           Acct-Terminate-Cause    User-Error              17
VALUE           Acct-Terminate-Cause    Host-Request            18

#
#	Non-Protocol Integer Translations
#

VALUE		Auth-Type		Local			0
VALUE		Auth-Type		System			1
VALUE		Auth-Type		SecurID			2
VALUE		Auth-Type		Crypt-Local		3
VALUE		Auth-Type		Reject			4

#
#	Cistron extensions
#
VALUE		Auth-Type		Pam			253
VALUE		Auth-Type		None			254

#
#	Experimental Non-Protocol Integer Translations for Cistron-Radiusd
#
VALUE		Fall-Through		No			0
VALUE		Fall-Through		Yes			1
VALUE		Add-Port-To-IP-Address	No			0
VALUE		Add-Port-To-IP-Address	Yes			1

#
#	Configuration Values
#	uncomment these two lines to turn account expiration on
#

#VALUE		Server-Config		Password-Expiration	30
#VALUE		Server-Config		Password-Warning	5

#       Octets-Direction
VALUE		Octets-Direction        Sum			0
VALUE		Octets-Direction        Input			1
VALUE		Octets-Direction        Output			2
VALUE		Octets-Direction        MaxOveral		3
VALUE		Octets-Direction        MaxSession		4
""")

        dictionary = [
            constants.RADIUSCLIENT_DICTIONARY,
            base_dict + textwrap.dedent("""\
INCLUDE %(dict_microsoft)s
""" % {'dict_microsoft': constants.RADIUSCLIENT_DICTIONARY_MICROSOFT})
            ]

        dictionary_ng = [
            constants.RADIUSCLIENT_NG_DICTIONARY,
            base_dict + textwrap.dedent("""\
$INCLUDE %(dict_microsoft)s
$INCLUDE %(dict_vpnease)s
""" % {'dict_microsoft': constants.RADIUSCLIENT_NG_DICTIONARY_MICROSOFT, 'dict_vpnease':constants.RADIUSCLIENT_NG_DICTIONARY_VPNEASE})]


        base_dict_microsoft = textwrap.dedent("""\
#
#	Microsoft's VSA's, from RFC 2548
#
#	$Id: dictionary.microsoft,v 1.1 2004/11/14 07:26:26 paulus Exp $
#

VENDOR		Microsoft	311	Microsoft

ATTRIBUTE	MS-CHAP-Response	1	string	Microsoft
ATTRIBUTE	MS-CHAP-Error		2	string	Microsoft
ATTRIBUTE	MS-CHAP-CPW-1		3	string	Microsoft
ATTRIBUTE	MS-CHAP-CPW-2		4	string	Microsoft
ATTRIBUTE	MS-CHAP-LM-Enc-PW	5	string	Microsoft
ATTRIBUTE	MS-CHAP-NT-Enc-PW	6	string	Microsoft
ATTRIBUTE	MS-MPPE-Encryption-Policy 7	string	Microsoft
# This is referred to as both singular and plural in the RFC.
# Plural seems to make more sense.
ATTRIBUTE	MS-MPPE-Encryption-Type 8	string	Microsoft
ATTRIBUTE	MS-MPPE-Encryption-Types  8	string	Microsoft
ATTRIBUTE	MS-RAS-Vendor		9	integer	Microsoft
ATTRIBUTE	MS-CHAP-Domain		10	string	Microsoft
ATTRIBUTE	MS-CHAP-Challenge	11	string	Microsoft
ATTRIBUTE	MS-CHAP-MPPE-Keys	12	string	Microsoft
ATTRIBUTE	MS-BAP-Usage		13	integer	Microsoft
ATTRIBUTE	MS-Link-Utilization-Threshold 14 integer	Microsoft
ATTRIBUTE	MS-Link-Drop-Time-Limit	15	integer	Microsoft
ATTRIBUTE	MS-MPPE-Send-Key	16	string	Microsoft
ATTRIBUTE	MS-MPPE-Recv-Key	17	string	Microsoft
ATTRIBUTE	MS-RAS-Version		18	string	Microsoft
ATTRIBUTE	MS-Old-ARAP-Password	19	string	Microsoft
ATTRIBUTE	MS-New-ARAP-Password	20	string	Microsoft
ATTRIBUTE	MS-ARAP-PW-Change-Reason 21	integer	Microsoft

ATTRIBUTE	MS-Filter		22	string	Microsoft
ATTRIBUTE	MS-Acct-Auth-Type	23	integer	Microsoft
ATTRIBUTE	MS-Acct-EAP-Type	24	integer	Microsoft

ATTRIBUTE	MS-CHAP2-Response	25	string	Microsoft
ATTRIBUTE	MS-CHAP2-Success	26	string	Microsoft
ATTRIBUTE	MS-CHAP2-CPW		27	string	Microsoft

ATTRIBUTE	MS-Primary-DNS-Server	28	ipaddr	Microsoft
ATTRIBUTE	MS-Secondary-DNS-Server	29	ipaddr	Microsoft
ATTRIBUTE	MS-Primary-NBNS-Server	30	ipaddr	Microsoft
ATTRIBUTE	MS-Secondary-NBNS-Server 31	ipaddr	Microsoft

#ATTRIBUTE	MS-ARAP-Challenge	33	string	Microsoft


#
#	Integer Translations
#

#	MS-BAP-Usage Values

VALUE		MS-BAP-Usage		Not-Allowed	0
VALUE		MS-BAP-Usage		Allowed		1
VALUE		MS-BAP-Usage		Required	2

#	MS-ARAP-Password-Change-Reason Values

VALUE	MS-ARAP-PW-Change-Reason	Just-Change-Password		1
VALUE	MS-ARAP-PW-Change-Reason	Expired-Password		2
VALUE	MS-ARAP-PW-Change-Reason	Admin-Requires-Password-Change	3
VALUE	MS-ARAP-PW-Change-Reason	Password-Too-Short		4

#	MS-Acct-Auth-Type Values

VALUE		MS-Acct-Auth-Type	PAP		1
VALUE		MS-Acct-Auth-Type	CHAP		2
VALUE		MS-Acct-Auth-Type	MS-CHAP-1	3
VALUE		MS-Acct-Auth-Type	MS-CHAP-2	4
VALUE		MS-Acct-Auth-Type	EAP		5

#	MS-Acct-EAP-Type Values

VALUE		MS-Acct-EAP-Type	MD5		4
VALUE		MS-Acct-EAP-Type	OTP		5
VALUE		MS-Acct-EAP-Type	Generic-Token-Card	6
VALUE		MS-Acct-EAP-Type	TLS		13
""")


        dictionary_microsoft = [
            constants.RADIUSCLIENT_DICTIONARY_MICROSOFT,
            base_dict_microsoft
            ]

        dictionary_microsoft_ng = [
            constants.RADIUSCLIENT_NG_DICTIONARY_MICROSOFT,
            base_dict_microsoft
            ]

        dictionary_vpnease_ng = [
            constants.RADIUSCLIENT_NG_DICTIONARY_VPNEASE,

            textwrap.dedent("""\
#
#  Radius dictionary for VPNease-specific attributes
#

VENDOR VPNease 26058

ATTRIBUTE VE-User-Administrator-Privileges 1 integer VPNease
""")]

        # XXX: may need changing in the future
        radius_timeout = 10
        radius_retries = 3

        client_conf = [
            constants.RADIUSCLIENT_CONFIG,
            textwrap.dedent("""\
            # autogenerated file, do not edit

            auth_order      radius
            login_tries     4
            login_timeout   60
            nologin         /etc/nologin
            issue           %(issue)s
            # authserver      %(radius_ip)s:1812
            # acctserver      %(radius_ip)s:1813
            authserver      127.0.0.1:1812
            acctserver      127.0.0.1:1813
            servers         %(servers)s
            dictionary      %(dictionary)s
            login_radius    /usr/sbin/login.radius
            seqfile         /var/run/radius.seq
            mapfile         %(mapfile)s
            default_realm
            radius_timeout  %(radius_timeout)d
            radius_retries  %(radius_retries)d
            login_local     /bin/login
            """ % {'issue':constants.RADIUSCLIENT_ISSUE, 'servers':constants.RADIUSCLIENT_SERVERS, 'dictionary':constants.RADIUSCLIENT_DICTIONARY, 'mapfile':constants.RADIUSCLIENT_MAPFILE, 'radius_ip':radius_ip, 'radius_timeout':radius_timeout, 'radius_retries':radius_retries})]

        client_conf_ng = [
            constants.RADIUSCLIENT_NG_CONFIG,
            textwrap.dedent("""\
            # autogenerated file, do not edit

            auth_order      radius
            login_tries     4
            login_timeout   60
            nologin         /etc/nologin
            issue           %(issue)s
            # authserver      %(radius_ip)s:1812
            # acctserver      %(radius_ip)s:1813
            authserver      127.0.0.1:1812
            acctserver      127.0.0.1:1813
            servers         %(servers)s
            dictionary      %(dictionary)s
            login_radius    /usr/sbin/login.radius
            seqfile         /var/run/radius.seq
            mapfile         %(mapfile)s
            default_realm
            radius_timeout  %(radius_timeout)d
            radius_retries  %(radius_retries)d
            login_local     /bin/login
            bindaddr 127.0.0.1

            """ % {'issue':constants.RADIUSCLIENT_NG_ISSUE, 'servers':constants.RADIUSCLIENT_NG_SERVERS, 'dictionary':constants.RADIUSCLIENT_NG_DICTIONARY, 'mapfile':constants.RADIUSCLIENT_NG_MAPFILE, 'radius_ip':radius_ip, 'radius_timeout':radius_timeout, 'radius_retries':radius_retries})]


        issue = [
            constants.RADIUSCLIENT_ISSUE,
            textwrap.dedent("""\
            (\I)
            -----------------------------------------------------
            \S \R (\N) (port \L)
            -----------------------------------------------------
            """)
            ]

        issue_ng = [
            constants.RADIUSCLIENT_NG_ISSUE,
            textwrap.dedent("""\
            (\I)
            -----------------------------------------------------
            \S \R (\N) (port \L)
            -----------------------------------------------------
            """)
            ]

        portid = [
            constants.RADIUSCLIENT_MAPFILE,
            textwrap.dedent("""\
            /dev/tty1       1
            /dev/tty2       2
            /dev/tty3       3
            """)
            ]

        portid_ng = [
            constants.RADIUSCLIENT_NG_MAPFILE,
            textwrap.dedent("""\
            /dev/tty1       1
            /dev/tty2       2
            /dev/tty3       3
            """)
            ]

        configs = [servers, client_conf, dictionary, dictionary_microsoft, issue, portid]
        configs += [servers_ng, client_conf_ng, dictionary_ng, dictionary_microsoft_ng, dictionary_vpnease_ng, issue_ng, portid_ng]
        return configs

    # Note: pppd processes never checked
    def check_process(self):
        return True

    def create_config(self, cfg, resinfo):
        scripts = self._create_ppp_scripts(cfg)
        for i, j, k in [(constants.PPP_PAP_SECRETS, self._create_ppp_pap_secrets(cfg), 0600),
                        (constants.PPP_CHAP_SECRETS, self._create_ppp_chap_secrets(cfg), 0600),
                        (constants.PPP_OPTIONS, self._create_ppp_options(cfg), 0600),
                        (constants.PPP_IP_PRE_UP, scripts['ip-pre-up'], 0755),
                        (constants.PPP_IP_UP, scripts['ip-up'], 0755),
                        (constants.PPP_IP_DOWN, scripts['ip-down'], 0755)]:
            self.configs += [{'file': i, 'cont': j, 'mode': k}]

        for f, c in self._create_radiusclient_config(cfg, resinfo):
            self.configs += [{'file': f, 'cont': c, 'mode': 0600}]

    # Ensure that the default config files for radiusclient(s)
    # are removed before start
    def pre_start(self):
        run_command([constants.CMD_RM, '-rf', '/etc/radiusclient', '/etc/radiusclient-ng'], retval=runcommand.FAIL)

    # Nothing to do for start
    # Note: default stop action still used.
    def start(self):
        pass

    # This is done before openl2tp stop to give time for a clean
    # disconnect.
    def pre_stop(self):
        daemon.DaemonConfig.soft_stop(self, silent=True)

    # XXX: currently pppd does not create pidfiles because
    # linkname -options is not given.
    def hard_stop(self):
        daemon.DaemonConfig.hard_stop(self)

        #cleanup_files = []
        #for root, dirs, files in os.path.walk(pid_dir):
        #    for i in files:
        #        if _re_pppd_pidfiles.match(i):
        #            cleanup_files.append(os.path.join(root, i))
        #    break
        #self.d.cleanup_daemon(cleanup_files)
