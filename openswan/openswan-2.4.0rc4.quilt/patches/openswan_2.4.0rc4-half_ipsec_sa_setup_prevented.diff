Index: openswan-2.4.0rc4.quilt/include/pluto_constants.h
===================================================================
--- openswan-2.4.0rc4.quilt.orig/include/pluto_constants.h	2006-12-03 19:38:42.000000000 +0200
+++ openswan-2.4.0rc4.quilt/include/pluto_constants.h	2006-12-03 19:38:51.000000000 +0200
@@ -299,7 +299,10 @@
 				  || (s) == STATE_MODE_CFG_R2 \
                                   || (s) == STATE_XAUTH_I0 || (s) == STATE_XAUTH_I1)
 #define IS_IPSEC_SA_ESTABLISHED(s) ((s) == STATE_QUICK_I2 || (s) == STATE_QUICK_R2)
-#define IS_ONLY_INBOUND_IPSEC_SA_ESTABLISHED(s) ((s) == STATE_QUICK_R1)
+/* this is an ugly hack, disable it */
+/* #define IS_ONLY_INBOUND_IPSEC_SA_ESTABLISHED(s) ((s) == STATE_QUICK_R1) */
+#define IS_ONLY_INBOUND_IPSEC_SA_ESTABLISHED(s) (0)
+
 #ifdef MODECFG
 #define IS_MODE_CFG_ESTABLISHED(s) ((s) == STATE_MODE_CFG_R2)
 #endif
Index: openswan-2.4.0rc4.quilt/programs/pluto/ikev1_quick.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/programs/pluto/ikev1_quick.c	2006-12-03 19:38:43.000000000 +0200
+++ openswan-2.4.0rc4.quilt/programs/pluto/ikev1_quick.c	2006-12-03 19:38:51.000000000 +0200
@@ -1934,13 +1934,16 @@
     /* Derive new keying material */
     compute_keymats(st);
 
+#if 1 /* l2tp-workaround: this is wrong: install SAs after the last message. */
     /* Tell the kernel to establish the new inbound SA
      * (unless the commit bit is set -- which we don't support).
      * We do this before any state updating so that
      * failure won't look like success.
      */
+#else
     if (!install_inbound_ipsec_sa(st))
 	return STF_INTERNAL_ERROR;	/* ??? we may be partly committed */
+#endif
     
     /* encrypt message, except for fixed part of header */
     
@@ -2117,8 +2120,13 @@
      * We do this before any state updating so that
      * failure won't look like success.
      */
+#if 1 /* l2tp-workaround: install both SAs here. */
+    if (!install_ipsec_sa(st, TRUE))
+	return STF_INTERNAL_ERROR;
+#else
     if (!install_ipsec_sa(st, FALSE))
 	return STF_INTERNAL_ERROR;
+#endif
 
     {
       DBG(DBG_CONTROLMORE, DBG_log("inI2: instance %s[%ld], setting newest_ipsec_sa to #%ld (was #%ld) (spd.eroute=#%ld)"
Index: openswan-2.4.0rc4.quilt/programs/pluto/kernel.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/programs/pluto/kernel.c	2006-12-03 19:38:43.000000000 +0200
+++ openswan-2.4.0rc4.quilt/programs/pluto/kernel.c	2006-12-03 19:38:51.000000000 +0200
@@ -1532,6 +1532,10 @@
     unsigned int proto = 0, satype = 0;
     bool replace;
 
+#if 1 /* l2tp-workaround */
+    int rc;
+#endif
+
     /* SPIs, saved for spigrouping or undoing, if necessary */
     struct kernel_sa
         said[EM_MAXRELSPIS],
@@ -1915,8 +1919,12 @@
         encapsulation = ENCAPSULATION_MODE_TUNNEL;
     }
 
+#if 1 /* l2tp-workaround: may safely eroute inbound always: ignore possible errors. */
+    if (kernel_ops->inbound_eroute || (encapsulation == ENCAPSULATION_MODE_TUNNEL))
+#else
     if (kernel_ops->inbound_eroute ? c->spd.eroute_owner == SOS_NOBODY
         : encapsulation == ENCAPSULATION_MODE_TUNNEL)
+#endif
     {
         /* If inbound, and policy does not specifie DISABLEARRIVALCHECK,
          * tell KLIPS to enforce the IP addresses appropriate for this tunnel.
@@ -1927,7 +1935,11 @@
         {
             struct pfkey_proto_info proto_info[4];
             int i = 0;
-            
+
+#if L2TP_DEBUG
+	    openswan_log("l2tp-debug: try to insert inbound policy.");
+#endif
+
             if (st->st_ipcomp.present)
             {
                 proto_info[i].proto = IPPROTO_COMP;
@@ -1963,15 +1975,41 @@
                     proto_info[i].encapsulation = ENCAPSULATION_MODE_TRANSPORT;
                 }
             }
-            
-            /* MCR - should be passed a spd_eroute structure here */
-            (void) raw_eroute(&c->spd.that.host_addr, &c->spd.that.client
-                              , &c->spd.this.host_addr, &c->spd.this.client
+
+#if 1 /* l2tp-workaround: use replace instead of add when the policy already exists. */
+	    if (c->spd.eroute_owner == SOS_NOBODY) {
+		rc = raw_eroute(&c->spd.that.host_addr, &c->spd.that.client
+				, &c->spd.this.host_addr, &c->spd.this.client
+				, inner_spi, proto
+				, c->spd.this.protocol
+				, satype
+				, proto_info, 0
+				, ERO_ADD_INBOUND, "add inbound");
+#if L2TP_DEBUG
+		openswan_log("l2tp-debug: raw_eroute: add inbound: %d", rc);
+#endif
+	    } else {
+		rc = raw_eroute(&c->spd.that.host_addr, &c->spd.that.client
+				, &c->spd.this.host_addr, &c->spd.this.client
+				, inner_spi, proto
+				, c->spd.this.protocol
+				, satype
+				, proto_info, 0
+				, ERO_REPLACE_INBOUND, "replace inbound");
+#if L2TP_DEBUG
+		openswan_log("l2tp-debug: raw_eroute: replace inbound: %d", rc);
+#endif
+	    }
+#else
+	    /* MCR - should be passed a spd_eroute structure here */
+	    (void) raw_eroute(&c->spd.that.host_addr, &c->spd.that.client
+			      , &c->spd.this.host_addr, &c->spd.this.client
                               , inner_spi, proto
                               , c->spd.this.protocol
                               , satype
                               , proto_info, 0
                               , ERO_ADD_INBOUND, "add inbound");
+#endif /* 1 */
         }
     }
 
@@ -2210,6 +2248,8 @@
  * The Responder will subsequently use install_ipsec_sa for the outbound.
  * The Initiator uses install_ipsec_sa to install both at once.
  */
+#if 1 /* l2tp-workaround: not used anymore. */
+#else
 bool
 install_inbound_ipsec_sa(struct state *st)
 {
@@ -2266,6 +2306,7 @@
     return TRUE;
 #endif /* !KLIPS */
 }
+#endif
 
 /* Install a route and then a prospective shunt eroute or an SA group eroute.
  * Assumption: could_route gave a go-ahead.
Index: openswan-2.4.0rc4.quilt/programs/pluto/kernel.h
===================================================================
--- openswan-2.4.0rc4.quilt.orig/programs/pluto/kernel.h	2006-12-03 19:38:43.000000000 +0200
+++ openswan-2.4.0rc4.quilt/programs/pluto/kernel.h	2006-12-03 19:38:51.000000000 +0200
@@ -33,6 +33,8 @@
 #define ERO_REPLACE	(SADB_X_ADDFLOW | (SADB_X_SAFLAGS_REPLACEFLOW << ERO_FLAG_SHIFT))
 #define ERO_ADD_INBOUND	(SADB_X_ADDFLOW | (SADB_X_SAFLAGS_INFLOW << ERO_FLAG_SHIFT))
 #define ERO_DEL_INBOUND	(SADB_X_DELFLOW | (SADB_X_SAFLAGS_INFLOW << ERO_FLAG_SHIFT))
+/* l2tp-workaround: inbound replace needed for safety. */
+#define ERO_REPLACE_INBOUND (SADB_X_ADDFLOW | (SADB_X_SAFLAGS_REPLACEFLOW << ERO_FLAG_SHIFT) | (SADB_X_SAFLAGS_INFLOW << ERO_FLAG_SHIFT))
 
 struct pfkey_proto_info {
 	int proto;
@@ -186,7 +188,10 @@
 				 , bool tunnel_mode);
 extern ipsec_spi_t get_my_cpi(struct spd_route *sr, bool tunnel_mode);
 
+#if 1 /* l2tp-workaround: not used. */
+#else
 extern bool install_inbound_ipsec_sa(struct state *st);
+#endif
 extern bool install_ipsec_sa(struct state *st, bool inbound_also);
 extern void delete_ipsec_sa(struct state *st, bool inbound_only);
 extern bool route_and_eroute(struct connection *c
Index: openswan-2.4.0rc4.quilt/programs/pluto/pluto_constants.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/programs/pluto/pluto_constants.c	2006-12-03 19:38:43.000000000 +0200
+++ openswan-2.4.0rc4.quilt/programs/pluto/pluto_constants.c	2006-12-03 19:38:51.000000000 +0200
@@ -155,7 +155,8 @@
 
 	"expecting QI1",	/* STATE_QUICK_R0 */
 	"sent QI1, expecting QR1",	/* STATE_QUICK_I1 */
-	"sent QR1, inbound IPsec SA installed, expecting QI2",	/* STATE_QUICK_R1 */
+	/* half-setup IPsec SAs are the most evil things, get rid of them! */
+	"sent QR1, expecting QI2",	/* STATE_QUICK_R1 */
 	"sent QI2, IPsec SA established",	/* STATE_QUICK_I2 */
 	"IPsec SA established",	/* STATE_QUICK_R2 */
 
