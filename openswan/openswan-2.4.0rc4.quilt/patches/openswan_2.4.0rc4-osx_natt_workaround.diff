Index: openswan-2.4.0rc4.quilt/include/ietf_constants.h
===================================================================
--- openswan-2.4.0rc4.quilt.orig/include/ietf_constants.h	2006-12-03 19:53:27.000000000 +0200
+++ openswan-2.4.0rc4.quilt/include/ietf_constants.h	2006-12-03 19:53:37.000000000 +0200
@@ -270,6 +270,8 @@
 #define ISAKMP_NEXT_D          12	/* Delete */
 #define ISAKMP_NEXT_VID        13	/* Vendor ID */
 #define ISAKMP_NEXT_ATTR       14       /* Mode config Attribute */
+#define ISAKMP_NEXT_NATD_OSX   15       /* NAT-Traversal: NAT-D (osx) */
+#define ISAKMP_NEXT_NATOA_OSX  16       /* NAT-Traversal: NAT-OA (osx) */
 #define ISAKMP_NEXT_NATD_RFC   20       /* NAT-Traversal: NAT-D (rfc) */
 #define ISAKMP_NEXT_NATOA_RFC  21       /* NAT-Traversal: NAT-OA (rfc) */
 #define ISAKMP_NEXT_ROOF       22	/* roof on payload types */
Index: openswan-2.4.0rc4.quilt/lib/libopenswan/constants.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/lib/libopenswan/constants.c	2006-12-03 19:53:27.000000000 +0200
+++ openswan-2.4.0rc4.quilt/lib/libopenswan/constants.c	2006-12-03 19:53:37.000000000 +0200
@@ -123,8 +123,8 @@
 	"ISAKMP_NEXT_D",
 	"ISAKMP_NEXT_VID",
 	"ISAKMP_NEXT_MODECFG",  /* 14 */
-	"ISAKMP_NEXT_15",
-	"ISAKMP_NEXT_16",
+	"ISAKMP_NEXT_NAT-D-OSX",
+	"ISAKMP_NEXT_NAT-OA-OSX",
 	"ISAKMP_NEXT_17",
 	"ISAKMP_NEXT_18",
 	"ISAKMP_NEXT_19",
@@ -917,7 +917,11 @@
   "draft-ietf-ipsec-nat-t-ike-00/01",    /* 0 */
   "draft-ietf-ipsec-nat-t-ike-02/03",
   "RFC 3947 (NAT-Traversal)",
+#if 1 /* l2tp-workaround: draft-ietf-ipsec-nat-t-ike. */
+  "draft-ietf-ipsec-nat-t-ike",          /* 3 */
+#else
   "3",                                   /* 3 */
+#endif
   "4",   "5",   "6",   "7", 
   "8",   "9",   "10",  "11",
   "12",  "13",  "14",  "15",
Index: openswan-2.4.0rc4.quilt/lib/libopenswan/packet.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/lib/libopenswan/packet.c	2006-12-03 19:53:27.000000000 +0200
+++ openswan-2.4.0rc4.quilt/lib/libopenswan/packet.c	2006-12-03 19:53:37.000000000 +0200
@@ -631,8 +631,13 @@
     &isakmp_delete_desc,		/* 12 ISAKMP_NEXT_D (Delete) */
     &isakmp_vendor_id_desc,		/* 13 ISAKMP_NEXT_VID (Vendor ID) */
     &isakmp_attr_desc,                  /* 14 ISAKMP_NEXT_ATTR (ModeCfg)  */
+#if 1 /* l2tp-workaround: include the OSX nat-d */
+    &isakmp_nat_d,                      /* 15 */
+    &isakmp_nat_oa,                     /* 16 */
+#else
     NULL,                               /* 15 */
     NULL,                               /* 16 */
+#endif
     NULL,                               /* 17 */
     NULL,                               /* 18 */
     NULL,                               /* 19 */
Index: openswan-2.4.0rc4.quilt/programs/pluto/demux.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/programs/pluto/demux.c	2006-12-03 19:53:28.000000000 +0200
+++ openswan-2.4.0rc4.quilt/programs/pluto/demux.c	2006-12-03 19:53:37.000000000 +0200
@@ -295,7 +295,7 @@
     { STATE_MAIN_R1, STATE_MAIN_R2
     , SMF_PSK_AUTH | SMF_DS_AUTH | SMF_REPLY
 #ifdef NAT_TRAVERSAL
-    , P(KE) | P(NONCE), P(VID) | P(CR) | P(NATD_RFC), PT(KE)
+    , P(KE) | P(NONCE), P(VID) | P(CR) | P(NATD_RFC) | P(NATD_OSX), PT(KE)
 #else
     , P(KE) | P(NONCE), P(VID) | P(CR), PT(KE)
 #endif
@@ -324,7 +324,7 @@
     { STATE_MAIN_I2, STATE_MAIN_I3
     , SMF_PSK_AUTH | SMF_DS_AUTH | SMF_INITIATOR | SMF_OUTPUT_ENCRYPTED | SMF_REPLY
 #ifdef NAT_TRAVERSAL
-    , P(KE) | P(NONCE), P(VID) | P(CR) | P(NATD_RFC), PT(ID)
+    , P(KE) | P(NONCE), P(VID) | P(CR) | P(NATD_RFC) | P(NATD_OSX), PT(ID)
 #else
     , P(KE) | P(NONCE), P(VID) | P(CR), PT(ID)
 #endif
@@ -430,12 +430,12 @@
      */
     { STATE_AGGR_I1, STATE_AGGR_I2,
       SMF_PSK_AUTH | SMF_INITIATOR | SMF_OUTPUT_ENCRYPTED | SMF_REPLY | SMF_RELEASE_PENDING_P2,
-      P(SA) | P(KE) | P(NONCE) | P(ID) | P(HASH), P(VID) | P(NATD_RFC) , PT(NONE),
+      P(SA) | P(KE) | P(NONCE) | P(ID) | P(HASH), P(VID) | P(NATD_RFC) | P(NATD_OSX), PT(NONE),
       EVENT_SA_REPLACE, aggr_inR1_outI2 },
 
     { STATE_AGGR_I1, STATE_AGGR_I2,
       SMF_DS_AUTH | SMF_INITIATOR | SMF_OUTPUT_ENCRYPTED | SMF_REPLY | SMF_RELEASE_PENDING_P2,
-      P(SA) | P(KE) | P(NONCE) | P(ID) | P(SIG), P(VID) | P(NATD_RFC) , PT(NONE),
+      P(SA) | P(KE) | P(NONCE) | P(ID) | P(SIG), P(VID) | P(NATD_RFC) | P(NATD_OSX), PT(NONE),
       EVENT_SA_REPLACE, aggr_inR1_outI2 },
 
     /* STATE_AGGR_R1:
@@ -496,7 +496,7 @@
     { STATE_QUICK_R0, STATE_QUICK_R1
     , SMF_ALL_AUTH | SMF_ENCRYPTED | SMF_REPLY
 #ifdef NAT_TRAVERSAL
-    , P(HASH) | P(SA) | P(NONCE), /* P(SA) | */ P(KE) | P(ID) | P(NATOA_RFC), PT(NONE)
+    , P(HASH) | P(SA) | P(NONCE), /* P(SA) | */ P(KE) | P(ID) | P(NATOA_RFC) | P(NATOA_OSX), PT(NONE)
 #else
     , P(HASH) | P(SA) | P(NONCE), /* P(SA) | */ P(KE) | P(ID), PT(NONE)
 #endif
@@ -511,7 +511,7 @@
     { STATE_QUICK_I1, STATE_QUICK_I2
     , SMF_ALL_AUTH | SMF_INITIATOR | SMF_ENCRYPTED | SMF_REPLY
 #ifdef NAT_TRAVERSAL
-    , P(HASH) | P(SA) | P(NONCE), /* P(SA) | */ P(KE) | P(ID) | P(NATOA_RFC), PT(HASH)
+    , P(HASH) | P(SA) | P(NONCE), /* P(SA) | */ P(KE) | P(ID) | P(NATOA_RFC) | P(NATOA_OSX), PT(HASH)
 #else
     , P(HASH) | P(SA) | P(NONCE), /* P(SA) | */ P(KE) | P(ID), PT(HASH)
 #endif
@@ -2094,7 +2094,9 @@
 	    {
 		case ISAKMP_NEXT_NATD_RFC:
 		case ISAKMP_NEXT_NATOA_RFC:
-		    if ((!st) || (!(st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES))) {
+		case ISAKMP_NEXT_NATD_OSX:
+	    case ISAKMP_NEXT_NATOA_OSX:
+		    if ((!st) || (!(st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES) && !(st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES))) {
 			/*
 			 * don't accept NAT-D/NAT-OA reloc directly in message,
 			 * unless we're using NAT-T RFC
Index: openswan-2.4.0rc4.quilt/programs/pluto/nat_traversal.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/programs/pluto/nat_traversal.c	2006-12-03 19:53:28.000000000 +0200
+++ openswan-2.4.0rc4.quilt/programs/pluto/nat_traversal.c	2006-12-03 19:53:37.000000000 +0200
@@ -174,6 +174,7 @@
  *
  * Used when we're Initiator
  */
+/* l2tp-workaround: no fix needed */
 bool nat_traversal_add_vid(u_int8_t np, pb_stream *outs)
 {
 	bool r = TRUE;
@@ -186,6 +187,8 @@
 		if (r) r = out_vendorid(np, outs, VID_NATT_RFC);
 		if (r) r = out_vendorid(np, outs, VID_NATT_IETF_03);
 		if (r) r = out_vendorid(np, outs, VID_NATT_IETF_02);
+#if 1 /* l2tp-workaround: no need to include OSX natt vid here.. */
+#endif
 	}
 	if (nat_traversal_support_non_ike) {
 		if (r) r = out_vendorid(np, outs, VID_NATT_IETF_00);
@@ -207,6 +210,11 @@
 		case VID_NATT_RFC:
 			return LELEM(NAT_TRAVERSAL_RFC);
 			break;
+#if 1 /* l2tp-workaround: draft-ietf-ipsec-nat-t-ike. */
+	        case VID_NATT_DRAFT_IETF_IPSEC_NAT_T_IKE:
+		        return LELEM(NAT_TRAVERSAL_DRAFT_IETF_IPSEC_NAT_T_IKE);
+			break;
+#endif
 	}
 	return 0;
 }
@@ -216,7 +224,7 @@
 	char hash[MAX_DIGEST_LEN];
 	struct payload_digest *p;
 	struct state *st = md->st;
-	int i;
+	int i, found;
 
 	if (!st || !md->iface || !st->st_oakley.hasher) {
 		loglog(RC_LOG_SERIOUS, "NAT-Traversal: assert failed %s:%d",
@@ -225,7 +233,7 @@
 	}
 
 	/** Count NAT-D **/
-	for (p = md->chain[ISAKMP_NEXT_NATD_RFC], i=0;
+	for (p = md->chain[(st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES) ? ISAKMP_NEXT_NATD_OSX : ISAKMP_NEXT_NATD_RFC], i=0;
 	     p != NULL;
 	     p = p->next, i++);
 
@@ -242,29 +250,47 @@
 	/**
 	 * First one with my IP & port
 	 */
-	p = md->chain[ISAKMP_NEXT_NATD_RFC];
+	p = md->chain[(st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES) ? ISAKMP_NEXT_NATD_OSX : ISAKMP_NEXT_NATD_RFC];
 	_natd_hash(st->st_oakley.hasher, hash
 		   , st->st_icookie, st->st_rcookie
 		   , &(md->iface->ip_addr)
 		   , ntohs(st->st_localport));
 
-	if (!( (pbs_left(&p->pbs) == st->st_oakley.hasher->hash_digest_len)
-	       && (memcmp(p->pbs.cur, hash, st->st_oakley.hasher->hash_digest_len)==0)))
-	{
-#ifdef NAT_D_DEBUG
+#if 1 /* l2tp-workaround: check all NAT-D payloads. This helps with clients
+	 that send the NAT-D payloads in wrong order (eq. OSX Panther).
+	 Note that the other payload is not a problem: it will never match
+	 anyways because we use 'forceencaps' and deliberately break the
+	 peer NAT-D hash.
+      */
+	found=0;
+	for (i=0 ; p != NULL; p = p->next,i++) {
+		if ( (pbs_left(&p->pbs) == st->st_oakley.hasher->hash_digest_len) &&
+		     (memcmp(p->pbs.cur, hash, st->st_oakley.hasher->hash_digest_len)==0)
+		     ) {
+			found=i+1;
+		}
+	}
+
+	if (!found) {
 	    DBG(DBG_NATT,
 		DBG_log("NAT_TRAVERSAL_NAT_BHND_ME");
 		DBG_dump("expected NAT-D:", hash,
 			 st->st_oakley.hasher->hash_digest_len);
-		DBG_dump("received NAT-D:", p->pbs.cur, pbs_left(&p->pbs));
+		p = md->chain[(st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES) ? ISAKMP_NEXT_NATD_OSX : ISAKMP_NEXT_NATD_RFC];
+		for (i=0 ; p != NULL; p = p->next) {
+		    DBG_dump("received NAT-D:", p->pbs.cur, pbs_left(&p->pbs));
+		}
 		);
-#endif
 	    st->hidden_variables.st_nat_traversal |= LELEM(NAT_TRAVERSAL_NAT_BHND_ME);
+	} else {
+	    openswan_log ("l2tp-workaround: my NAT-D hash matched with hash number: %d", found);
 	}
+#endif
 
 	/**
 	 * The others with sender IP & port
 	 */
+	p = md->chain[(st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES) ? ISAKMP_NEXT_NATD_OSX : ISAKMP_NEXT_NATD_RFC];
 	_natd_hash(st->st_oakley.hasher, hash
 		   , st->st_icookie, st->st_rcookie
 		   , &(md->sender), ntohs(md->sender_port));
@@ -278,18 +304,17 @@
 	    }
 	}
 
+	/* l2tp-workaround: note: here !i means "found" */
 	if (!i) {
-#ifdef NAT_D_DEBUG
 	    DBG(DBG_NATT,
 		DBG_log("NAT_TRAVERSAL_NAT_BHND_PEER");
 		DBG_dump("expected NAT-D:", hash,
 			 st->st_oakley.hasher->hash_digest_len);
-		p = md->chain[ISAKMP_NEXT_NATD_RFC];
+		p = md->chain[(st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES) ? ISAKMP_NEXT_NATD_OSX : ISAKMP_NEXT_NATD_RFC];
 		for (p = p->next, i=0 ; p != NULL; p = p->next) {
 		    DBG_dump("received NAT-D:", p->pbs.cur, pbs_left(&p->pbs));
 		}
 		);
-#endif
 	    st->hidden_variables.st_nat_traversal |= LELEM(NAT_TRAVERSAL_NAT_BHND_PEER);
 	}
 	
@@ -322,8 +347,9 @@
 
 	DBG(DBG_EMITTING, DBG_log("sending NATD payloads"));
 
-	nat_np = (st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES
-	      ? ISAKMP_NEXT_NATD_RFC : ISAKMP_NEXT_NATD_DRAFTS);
+	/* l2tp-workaround: osx values. */
+	nat_np = ((st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES)
+		  ? ISAKMP_NEXT_NATD_RFC : ((st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES) ? ISAKMP_NEXT_NATD_OSX : ISAKMP_NEXT_NATD_DRAFTS));
 	if (!out_modify_previous_np(nat_np, outs)) {
 		return FALSE;
 	}
@@ -498,7 +524,7 @@
 	ip = &(st->st_localaddr);
 
 	nat_np = (st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES
-		  ? ISAKMP_NEXT_NATOA_RFC : ISAKMP_NEXT_NATOA_DRAFTS);
+		  ? ISAKMP_NEXT_NATOA_RFC : (st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES ? ISAKMP_NEXT_NATOA_OSX : ISAKMP_NEXT_NATOA_DRAFTS));
 	if (!out_modify_previous_np(nat_np, outs)) {
 		return FALSE;
 	}
@@ -550,6 +576,11 @@
 	case LELEM(NAT_TRAVERSAL_RFC):
 	    mth = natt_type_bitnames[2];
 	    break;
+#if 1 /* l2tp-workaround: draft-ietf-ipsec-nat-t-ike. */
+	case LELEM(NAT_TRAVERSAL_DRAFT_IETF_IPSEC_NAT_T_IKE):
+	    mth = natt_type_bitnames[3];
+	    break;
+#endif
 	}
 	switch (nt & NAT_T_DETECTED) {
 		case 0:
Index: openswan-2.4.0rc4.quilt/programs/pluto/spdb_struct.c
===================================================================
--- openswan-2.4.0rc4.quilt.orig/programs/pluto/spdb_struct.c	2006-12-03 19:53:28.000000000 +0200
+++ openswan-2.4.0rc4.quilt/programs/pluto/spdb_struct.c	2006-12-03 19:53:37.000000000 +0200
@@ -1505,7 +1505,7 @@
 #endif
 
 			case ENCAPSULATION_MODE_UDP_TUNNEL_DRAFTS:
-				if (st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES) {
+				if ((st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES) || (st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES)) {
 					loglog(RC_LOG_SERIOUS,
 						"%s must only be used with old IETF drafts",
 						enum_name(&enc_mode_names, val));
@@ -1534,7 +1534,7 @@
 
 			case ENCAPSULATION_MODE_UDP_TUNNEL_RFC:
 				if ((st->hidden_variables.st_nat_traversal & NAT_T_DETECTED) &&
-					(st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES)) {
+				    ((st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES) || (st->hidden_variables.st_nat_traversal & NAT_T_WITH_OSX_VALUES))) {
 					attrs->encapsulation = val - ENCAPSULATION_MODE_UDP_TUNNEL_RFC + ENCAPSULATION_MODE_TUNNEL;
 				}
 				else if (st->hidden_variables.st_nat_traversal & NAT_T_DETECTED) {
